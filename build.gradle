// ============================================================================
//                 KASPER - Kasper is the treasure keeper
//    www.viadeo.com - mobile.viadeo.com - api.viadeo.com - dev.viadeo.com
//            Viadeo Framework for effective CQRS/DDD architecture
// ============================================================================

apply plugin: 'sonar-runner'
// to apply the ipr transformation on the parent project we need to apply also the idea plugin here
apply plugin: 'idea'

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

idea {
    project {
        ipr {
            withXml { xmlDocument ->
                def project = xmlDocument.asNode()
                def compilerConfiguration = project.component.find {it.@name == 'CompilerConfiguration'}
                // first remove the node generated by the plugin, he has wrong structure
                compilerConfiguration.remove(compilerConfiguration.annotationProcessing)
                // append a new node with the right structure for annotation processing
                compilerConfiguration.append(new NodeBuilder().annotationProcessing {
                    profile(default: 'true', name: 'Default', enabled: 'true') {
                        processorPath(useClasspath: 'true')
                    }
                })
            }
        }
    }
}

allprojects  {
  apply plugin: 'maven'
  apply plugin: 'eclipse'
  apply plugin: 'cobertura'
  apply plugin: 'idea'
  apply plugin: 'findbugs'

  group = 'com.viadeo.kasper'
  version = '0.0.16-SNAPSHOT'

  idea {
    module {
      downloadJavadoc = true
      downloadSources = true
      // we want to exclude log4j version that is inherited from cobertura, this is a problem only when used with idea
      scopes.values().each {
        it['plus'].each {
            it.allDependencies.each { it.exclude group: 'log4j', module: 'log4j' }
        }
      }
    }
  }

  // Remote Maven repositories ---------
  repositories {

    maven { url "http://nexus01.infra.paris.apvo/content/groups/all_repositories"
        credentials.username nexus_username
        credentials.password nexus_password
    }

    mavenCentral()

    // Currently deleted, see http://issues.gradle.org/browse/GRADLE-2034
    // Refer to epantera or ldiasdasilva for questions
    mavenLocal()
  }

  cobertura {
     coverageFormats = ['xml']
     rootProject.subprojects.each {
         coverageDirs << file("${it.name}/build/classes/main")
     }
  }

}

subprojects {
  apply plugin: 'java'

  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  configurations {
      all*.exclude module: 'slf4j-log4j12'
      //all*.exclude(module: 'log4j', version: '1.2.9')
      deployerJars
  }

  // Use UTF-8 for reading xml (and other) data tests files
  tasks.withType(Test) { systemProperty "file.encoding", "UTF-8"  }
  tasks.withType(Compile) { options.encoding = "UTF-8" }
  compileTestJava.options.encoding

  // Adding javadoc and sources jars, it is really nice to have! --------------  
  // custom tasks for creating source jar 
  task sourcesJar(type: Jar, dependsOn:classes) {     
	classifier = 'sources'     
	from sourceSets.main.allSource 
  }
  
  // custom tasks for creating javadoc jar   
  task javadocJar(type: Jar, dependsOn:javadoc) {      
    classifier = 'javadoc'     
    from javadoc.destinationDir 
  }
  
  // add the jars as artifacts
  artifacts {      
    archives sourcesJar      
    archives javadocJar
  }

  // Maven repositories deployment configuration ------------------------------
  uploadArchives {
      repositories.mavenDeployer {
          configuration = configurations.deployerJars
          repository(url: "http://nexus01.infra.paris.apvo/content/repositories/kasper-releases") {
              authentication(userName: nexus_username, password: nexus_password)
          }
          snapshotRepository(url: "http://nexus01.infra.paris.apvo/content/repositories/kasper-snapshots") {
              authentication(userName: nexus_username, password: nexus_password)
          }
      }
  }

  // Dependency management -----------------------------------------------------
  ext.libraries = [

      // Third party dependencies ----------------------------------------------
      JACKSON_DATABIND      : 'com.fasterxml.jackson.core:jackson-databind:2.1.4',
      JACKSON_ANNOTATIONS   : 'com.fasterxml.jackson.core:jackson-annotations:2.1.4',
      JACKSON_CORE          : 'com.fasterxml.jackson.core:jackson-core:2.1.4',
      JACKSON_JSON          : 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.1.2',
      JACKSON_GUAVA_TYPES   : 'com.fasterxml.jackson.datatype:jackson-datatype-guava:2.1.2',
      JACKSON_JODA_TYPES   : 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.1.2',

      JERSEY_SERVER         : 'com.sun.jersey:jersey-server:1.16',
      JERSEY_CLIENT         : 'com.sun.jersey:jersey-client:1.16',
      JERSEY_CORE           : 'com.sun.jersey:jersey-core:1.16',
      JERSEY_JSON           : 'com.sun.jersey:jersey-json:1.16',
      JERSEY_SERVLET        : 'com.sun.jersey:jersey-servlet:1.16',
      JERSEY_GRIZZLY        : 'com.sun.jersey:jersey-grizzly2-servlet:1.16',
      JERSEY_GRIZZLY_SERVLET: 'org.glassfish.grizzly:grizzly-http-servlet:2.0',
      JERSEY_TEST_CORE      : 'com.sun.jersey.jersey-test-framework:jersey-test-framework-core:1.16',
      JERSEY_TEST_HTTP      : 'com.sun.jersey.jersey-test-framework:jersey-test-framework-http:1.16',
      JERSEY_TEST_GRIZZLY   : 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.0',

      JETTY_SERVLET         : 'org.eclipse.jetty:jetty-servlet:8.1.10.v20130312',

      PARANAMER             : 'com.thoughtworks.paranamer:paranamer:2.5.2',
      REFLECTIONS           : 'org.reflections:reflections:0.9.9-RC1',
      MYSQL                 : 'mysql:mysql-connector-java:5.1.24',
      COMMONS_DBCP          : 'commons-dbcp:commons-dbcp:1.4',
      JSON                  : 'org.json:json:20090211',
      DIFFUTILS             : 'com.googlecode.java-diff-utils:diffutils:1.2.1',
      SERVLET               : 'javax.servlet:javax.servlet-api:3.0.1',

      SPRING_CORE           : 'org.springframework:spring-core:3.1.4.RELEASE',
      SPRING_CONTEXT        : 'org.springframework:spring-context:3.1.4.RELEASE',
      SPRING_WEB            : 'org.springframework:spring-web:3.1.4.RELEASE',

      YAMMER_METRICS        : 'com.codahale.metrics:metrics-core:3.0.0',

      AXON_TEST             : 'org.axonframework:axon-test:2.0.2',
      AXON_CORE             : [
                                'javax.persistence:persistence-api:1.0',
                                'org.axonframework:axon-core:2.0.2'
                              ],
      AXON_MONGO            : 'org.axonframework:axon-mongo:2.0.2',

      JCACHE                : 'javax.cache:cache-api:0.5',
      JCACHE_EHCACHE        : 'net.sf.ehcache:ehcache-jcache:1.5.0-0.5',

      VALIDATION_API        : 'javax.validation:validation-api:1.1.0.Final',

      SLF4J                 : 'org.slf4j:slf4j-api:1.7.1',
      HAMCREST              : 'org.hamcrest:hamcrest-all:1.3',
      JUNIT                 : 'junit:junit:4.10',
      MOCKITO               : 'org.mockito:mockito-all:1.9.5-rc1',
      JODA_TIME             : 'joda-time:joda-time:2.1',
      GUAVA                 : 'com.google.guava:guava:13.0.1',

      LOGBACK               : [
                                'org.slf4j:slf4j-api:1.7.5',
                                'ch.qos.logback:logback-classic:1.0.13',
                                'ch.qos.logback:logback-core:1.0.13'
                              ]

  ] // see http://stackoverflow.com/questions/9547170/in-gradle-how-do-i-declare-common-dependencies-in-a-single-place

  dependencies {
    compile libraries.GUAVA
    compile libraries.JODA_TIME
    compile libraries.SLF4J

    testCompile libraries.LOGBACK
    testCompile libraries.JUNIT
    testCompile libraries.MOCKITO
    testCompile libraries.HAMCREST
    // lets provide lombok for our tests, so we don't have to write stupid get/srt
    testCompile "org.projectlombok:lombok:0.12.0"
    testCompile 'log4j:log4j:1.2.15'
  }

  // Sonar configuration for sub-projects
  sonarRunner {
      sonarProperties {
          property "sonar.sourceEncoding", "UTF-8"
      }
  }

  // FindBugs
  findbugs {
      toolVersion = "2.0.1"
      sourceSets = [sourceSets.main]
      ignoreFailures = true
      reportsDir = file("$project.buildDir/findbugsReports")
      effort = "max"
      reportLevel = "high"
  }

}

// Sonar configuration for root project
sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://hudson.smallbusiness.local:8080/sonar/"
        property "sonar.jdbc.url", "jdbc:mysql://hudson.smallbusiness.local:3306/sonar?useUnicode=true&amp;characterEncoding=utf8"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "sonar"
        property "sonar.dynamicAnalysis", "true"
        property "sonar.java.coveragePlugin", "cobertura"
    }
}

// FindBugs reports
tasks.withType(FindBugs) {
    reports {
        xml.enabled = true
        html.enabled = true
    }
 }

// Build dependencies ---------------------------------------------------------
buildscript {
    repositories {
        maven { url "http://nexus01.infra.paris.apvo/content/groups/all_repositories"
            credentials.username nexus_username
            credentials.password nexus_password
        }
    }
    dependencies {
        classpath('net.saliman:gradle-cobertura-plugin:1.1.2')
    }
}

task alljavadoc(type: Javadoc) { 
     source rootProject.subprojects.collect { project -> project.sourceSets.main.allJava } 
     classpath = files(rootProject.subprojects.collect {project -> project.sourceSets.main.compileClasspath }) 
     destinationDir = file('build/javadoc') 
}
