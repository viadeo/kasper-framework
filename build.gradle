// ============================================================================ //                 KASPER - Kasper is the treasure keeper
//    www.viadeo.com - mobile.viadeo.com - api.viadeo.com - dev.viadeo.com
//            Viadeo Framework for effective CQRS/DDD architecture
// ============================================================================
ext.gradleDir = "${rootProject.rootDir}/gradle"

ext.nexusCredentials = {
    username ultron_nexus_username
    password ultron_nexus_password
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

configure(allprojects) {
    apply plugin: 'idea'
    apply plugin: 'maven'
}

configure(rootProject) {
    idea.project {
        languageLevel = '1.8'
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'
            }
        }
    }

    apply plugin: 'sonar-runner'

    // Sonar configuration for root project
    sonarRunner {
        sonarProperties {
            property "sonar.host.url", "http://${sonar_host}:8080/sonar/"
            property "sonar.jdbc.url", "jdbc:mysql://${sonar_host}:3306/sonar?useUnicode=true&amp;characterEncoding=utf8"
            property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
            property "sonar.jdbc.username", "sonar"
            property "sonar.jdbc.password", "sonar"
            property "sonar.dynamicAnalysis", "true"
        }
    }
}

configure(subprojects) {
    apply plugin: 'java'
    apply from: "${rootProject.rootDir}/libraries.gradle"

    group = 'com.viadeo.kasper'
    version = '1.0.0-SNAPSHOT'

    if (project.name =~ /kasper-api|kasper-client|kasper-common/) {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    } else {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    idea.module.iml.withXml {
        it.node.component.find { it.@name == 'NewModuleRootManager' }.@LANGUAGE_LEVEL = '1.8'
    }

    configure([compileJava, compileTestJava]) {
        options.encoding = 'UTF-8'
    }

    configurations {
        all*.exclude module: 'slf4j-log4j12'
        all*.exclude module: 'slf4j-jcl'
        all*.exclude module: 'slf4j-jdk14'
        all*.exclude module: 'log4j'
        deployerJars
    }

    repositories {
//        mavenLocal()

        // Maven Central is first to be the default repository (ordering is important)
        mavenCentral()

        // Viadeo Nexus
        // Variables must be present in the 'gradle.properties' file
        maven {
            url "https://${nexus_host}/content/groups/all_repositories"
            credentials nexusCredentials
        }
    }

    // Adding javadoc and sources jars, it is really nice to have! --------------
    // custom tasks for creating source jar
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // custom tasks for creating javadoc jar
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // add the jars as artifacts
    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    jar {
        manifest {
            attributes(
                    "Manifest-Version"    : "1.0",
                    "Kasper-Version"    : version
            )
        }
    }

    // -----------------------------------------------------------------------------------------------------------------

    apply plugin: 'jacoco'

    // Jacoco configuration
    tasks.withType(Test) {
        jacoco {
            append = true
            destinationFile = file("$rootDir/build/jacoco/jacocoTest.exec")
        }
    }

    // -----------------------------------------------------------------------------------------------------------------

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "https://${nexus_host}/content/repositories/kasper-releases") {
                authentication(userName: nexus_username, password: nexus_password)
            }
            snapshotRepository(url: "https://${nexus_host}/content/repositories/kasper-snapshots") {
                authentication(userName: nexus_username, password: nexus_password)
            }
        }
    }

    // -----------------------------------------------------------------------------------------------------------------

    // Sonar configuration for sub-projects
    sonarRunner {
        sonarProperties {
            property "sonar.sourceEncoding", "UTF-8"
        }
    }

    // -----------------------------------------------------------------------------------------------------------------

    apply plugin: 'findbugs'

    findbugs {
        toolVersion = "3.0.0"
        sourceSets = [sourceSets.main]
        ignoreFailures = false
        reportsDir = file("$project.buildDir/findbugsReports")
        effort = "max"
        reportLevel = "high"
        visitors = ["FindSqlInjection", "SwitchFallthrough"]
        omitVisitors = ["FindNonShortCircuit"]
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}

task alljavadoc(type: Javadoc) {
    source rootProject.subprojects.collect { project -> project.sourceSets.main.allJava }
    classpath = files(rootProject.subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    destinationDir = file('build/javadoc')
}
